library(sf) # for reading in shape files and geospatial analysis
library(tmap) # for creating maps
library(ggmap) # for background map
library(raster) # for reading in raster files and geospatial analysis
library(FactoMineR) # for PCA
library(factoextra) # for PCA
library(cowplot) # for multi-plot
library(ape) # for reading and manipulating tree files
library(ggtree) # for viewing trees
madagascar <- ggmap(location = c(lon = 46.8691, lat= -18.7669), zoom = 5)
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5)
?get_map
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5,
source = "stamen")
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5,
source = "osm")
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5,
maptype = "toner", source = "osm")
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5,
maptype = "toner", source = "osm")
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5,
maptype = "toner", source = "stamen")
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5,
maptype = "toner", source = "stamen")
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5,
maptype = "terrain", source = "stamen")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5,
maptype = "terrain", source = "stamen")
?register_google
?register_google
register_google(key = "AIzaSyBhF3CmD3s9nPoFY25hY9VBwyOu0ReficI")
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669), zoom = 5,
maptype = "terrain", source = "stamen")
?get_map
?get_map
?get_map
library(knitr)
library(kableExtra)
library(magick)
library(formatR)
register_google(key = "AIzaSyBhF3CmD3s9nPoFY25hY9VBwyOu0ReficI")
library(tidyverse) # for general data management and manipulation
library(sf) # for reading in shape files and geospatial analysis
library(tmap) # for creating maps
library(ggmap) # for background map
library(raster) # for reading in raster files and geospatial analysis
library(FactoMineR) # for PCA
library(factoextra) # for PCA
library(cowplot) # for multi-plot
library(ape) # for reading and manipulating tree files
library(ggtree) # for viewing trees
register_google(key = "AIzaSyBhF3CmD3s9nPoFY25hY9VBwyOu0ReficI")
?get_map
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669),
maptype = "terrain", source = "stamen")
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669),
source = "stamen")
madagascar <- get_map(source = "stamen")
corvallis <- c(lon = -123.2620, lat = 44.5646)
madagascar <- get_map(corvallis, zoom = 13, maptype = 'satellite')
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669),
maptype = "terrain", source = "stamen")
rm(corvallis)
ggmap(madagascar)
ggmap(madagascar, zoom = 10)
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669),
maptype = "terrain", source = "stamen", zoom = 10)
ggmap(madagascar)
madagascar <- get_map(location = c(lon = 46.8691, lat= -18.7669),
maptype = "terrain", source = "stamen", zoom = 5)
ggmap(madagascar)
class(madagascar)
madagascar <- get_map(location = "Madagascar"),
madagascar <- get_map(location = "Madagascar",
maptype = "terrain", source = "stamen")
ggmap(madagascar)
ggmap(madagascar, zoom = 5)
madagascar <- get_map(location = "Madagascar",
maptype = "terrain",
source = "stamen",
zoom = 7)
madagascar <- get_map(location = "Madagascar",
maptype = "terrain",
source = "stamen",
zoom = 7)
madagascar <- get_map(location = "Madagascar",
maptype = "terrain",
source = "stamen",
zoom = 5)
madagascar <- get_map(location = "Madagascar",
maptype = "terrain", source = "stamen")
rm(madagascar)
madagascar <- get_map(location = "Madagascar",
maptype = "terrain", source = "stamen")
ggmap(madagascar)
madagascar <- get_map(location = "Madagascar",
maptype = "terrain", source = "stamen")
madagascar <- get_map(location = "Madagascar",
maptype = "terrain", source = "stamen", zoom = 10)
madagascar <- get_map(location = "Madagascar",
source = "osm", zoom = 10)
madagascar <- get_map(location = "Madagascar",
source = "google", zoom = 10)
ggmap(madagascar)
ggmap(madagascar)
rm(madagascar)
madagascar <- get_map(location = "Madagascar",
source = "google", zoom = 10)
ggmap(madagascar)
madagascar <- get_map(location = "Madagascar",
source = "stamen", zoom = 10)
madagascar <- get_map(location = c(lon = 46.8691, lat = -18.7669),
source = "stamen", zoom = 10)
ggmap(madagascar)
madagascar <- get_map(location = c(lon = 46.8691, lat = -18.7669),
source = "stamen", zoom = 7)
ggmap(madagascar)
madagascar <- get_map(location = c(lon = 46.8691, lat = -18.7669),
source = "stamen", zoom = 6)
ggmap(madagascar)
madagascar <- get_map(location = c(lon = 46.8691, lat = -18.7669),
source = "stamen", zoom = 5)
ggmap(madagascar)
madagascar <- get_map(location = c(lon = 46.8691, lat = -18.7669),
maptype = "terrain", source = "stamen", zoom = 5.7)
madagascar <- get_map(location = c(lon = 46.8691, lat = -18.7669),
maptype = "terrain", source = "stamen", zoom = 6)
ggmap(madagascar)
madagascar <- get_map(location = c(lon = 46.8691, lat = -18.7669),
maptype = "toner", source = "stamen", zoom = 6)
ggmap(madagascar)
biomes
madagascar <- get_map(location = c(left = 43.21812, bottom = -25.62458,
right = 50.47869, top = -11.95504),
maptype = "terrain-lines", source = "stamen", zoom = 6)
ggmap(madagascar)
madagascar <- get_map(location = c(left = 43.21812, bottom = -25.62458,
right = 50.47869, top = -11.95504),
maptype = "watercolor", source = "stamen", zoom = 6)
ggmap(madagascar)
madagascar <- get_map(location = c(left = 43.21812, bottom = -25.62458,
right = 50.47869, top = -11.95504),
maptype = "watercolor", source = "stamen", zoom = 6,
force = TRUE)
ggmap(madagascar)
madagascar <- get_map(location = c(left = 43.21812, bottom = -25.62458,
right = 50.47869, top = -11.95504),
maptype = "toner", source = "stamen", zoom = 6,
force = TRUE)
ggmap(madagascar)
rm(madagascar)
madagascar <- get_map(location = c(left = 43.21812, bottom = -25.62458,
right = 50.47869, top = -11.95504),
maptype = "toner", source = "stamen", zoom = 6,
force = TRUE)
ggmap(madagascar)
madagascar <- get_map(location = c(left = 43.21812, bottom = -25.62458,
right = 50.47869, top = -11.95504),
maptype = "toner", source = "stamen", zoom = 6,
force = TRUE, crop = FALSE)
ggmap(madagascar)
madagascar <- get_map(location = c(left = 43.21812, bottom = -25.62458,
right = 50.47869, top = -11.95504),
maptype = "terrain-background", source = "stamen", zoom = 6,
force = TRUE, crop = FALSE)
ggmap(madagascar)
madagascar <- get_map(location = c(left = 43.21812, bottom = -25.62458,
right = 50.47869, top = -11.95504),
maptype = "terrain-background", source = "stamen",
force = TRUE, crop = FALSE)
ggmap(madagascar)
madagascar <- get_map(location = c(left = 43.21812, bottom = -25.62458,
right = 50.47869, top = -11.95504),
maptype = "watercolor", source = "stamen",
force = TRUE, crop = FALSE)
ggmap(madagascar)
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
cache.comments = FALSE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
# worldclim data at 30s resolution; from http://worldclim.org/current
climRasters <- list.files("bio_37/", pattern = ".bil", full.names = TRUE)
climRasters <- map(climRasters, raster) # provides a list of single-layer rasters
library(tidyverse) # for general data manipulation and visualisation
library(sf) # for reading in shapefiles and geospatial analysis
library(raster) # for reading in raster files and geospatial analysis
library(tmap) # for cartography
library(FactoMineR) # for PCA
library(factoextra) # for PCA
library(cowplot) # for multi-plot
library(ape) # for reading and manipulating tree files
library(ggtree) # for viewing trees
library(knitr) # for r markdown control
library(kableExtra) # r markdown extras
# a prefix nulling hook.
# make sure to keep the default for normal processing
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect '\\s*[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
default_output_hook(x, options)
})
# set knitr defaults
knitr::opts_chunk$set(cache = TRUE,
cache.comments = FALSE,
comment = NA, # remove ## from output
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE) # remove [1] from output
# biome data, converted to sf object
(biomes <- st_read("bioclimates/", layer = "bc5_dd"))
(biomes <- biomes %>%
mutate(BC1 = as.factor(BC1)) %>%
st_set_crs(value = 4326) %>% # WGS84 CRS
arrange(BC1))
# madagascar biomes base map
pal <- c("#B5EB6C", "#EEFF85", "#A4EFFF", "#FECE80", "#FF9D85")
tmBaseMap <- tm_shape(biomes) +
tm_polygons(col = "BC1",
title = "Biome",
labels = c("Humid", "Sub-humid", "Montane", "Dry", "Sub-arid"),
border.alpha = 0,
palette = pal)
# biome map figure (extra figure for presentations)
# (tmBiomeMap <- tmBaseMap  +
#  tm_layout(frame = FALSE,
#            legend.position = c(0.89, 0.26),
#            legend.width = 1,
#            legend.text.color = "#404040",
#            legend.title.fontfamily = "Helvetica",
#            legend.text.fontfamily = "Helvetica"))
# tmap_save(tmBiomeMap, file.path("..", "results", "figures", "baseMap.pdf"))
# hypothesis map figure (extra figure for presentations)
# (tmHypMap <- tmBaseMap  +
#  tm_layout(frame = FALSE,
#            legend.position = c(0.99, 0.4),
#            legend.width = 1,
#            legend.text.color = "#404040",
#            legend.title.fontfamily = "Helvetica",
#            legend.text.fontfamily = "Helvetica"))
# tmap_save(tmBiomeMap, file.path("..", "results", "figures", "hypMap.pdf"))
# distribution data, converted to sf object
(sol <- read_csv("sol.csv"))
(sol <- sol %>%
rename(brahms = BRAHMS,
species = SPECIES,
clade = GROUP,
lat = LATDEC,
long = LONGDEC) %>%
mutate(brahms = as.factor(brahms),
clade = as.factor(clade),
species = as.factor(str_extract(species, ("\\w*\\s\\w*")))) %>%
st_as_sf(coords = c("long", "lat"), crs = 4326))
# determine which biome a species falls in
(inter <- as_tibble(unlist(st_intersects(sol, biomes, sparse = FALSE))))
# join the species/biome data with the distribution data to filter out species
# which don't intersect with a biome
(sol <- inter %>%
add_column(brahms = sol$brahms, .before = 1) %>%
gather(biome, value, -brahms) %>%
filter(value == TRUE) %>%
dplyr::select(brahms, biome) %>%
mutate(biome = as.integer(str_extract(biome, "\\d+")),
biome = case_when(
biome <= 5 ~ 1,
between(biome, 6, 17) ~ 2,
between(biome, 18, 24) ~ 3,
between(biome, 25, 29) ~ 4,
biome >= 30 ~ 5
)) %>%
inner_join(sol, by = "brahms") %>%
dplyr::select(brahms, species, clade, biome, geometry) %>%
arrange(clade, species, biome) %>%
st_as_sf())
# tmap distribution map
tmDistMap <- tmBaseMap +
tm_shape(sol) +
tm_bubbles(shape = 21, size = 0.1, alpha = 0.8, col = "clade",
title.col = "Clade",
labels = c("Dry", "Widespread"),
palette = c("#6D9EC1", "#E46726")) +
tm_layout(frame = FALSE,
legend.position = c(0.89, 0.1),
legend.width = 1,
legend.text.color = "#404040",
legend.title.fontfamily = "Helvetica",
legend.text.fontfamily = "Helvetica")
tmap_save(tmDistMap, file.path("..", "results", "figures", "distMap.pdf"))
# get occurences of species in biome; if > 12.5% found in biome, species is
# considered to be found in that biome
(sol %>%
# remove geometry column and convert to tibble
st_set_geometry(NULL) %>%
as_tibble() %>%
# count the number of each species found in each biome
group_by(clade, biome) %>%
count(species) %>%
ungroup() %>%
arrange(clade, species, biome) %>%
# turn counts into percentages of species occurence in each biome
group_by(species) %>%
mutate(count = sum(n),
n = round(n / sum(n), digits = 3)) %>%
spread(biome, n) %>%
replace(is.na(.), 0) %>%
rename("humid" = "1",
"sub-humid" = "2",
"montane" = "3",
"dry" = "4",
"sub-arid" = "5"))
# worldclim data at 30s resolution; from http://worldclim.org/current
climRasters <- list.files("bio_37/", pattern = ".bil", full.names = TRUE)
climRasters <- map(climRasters, raster) # provides a list of single-layer rasters
# raster layer names; from http://worldclim.org/bioclim
varNames <- c("annual_Mean_Temperature", "mean_Diurnal_Range", "isothermality",
"temperature_Seasonality", "max_Temperature_of_Warmest_Month",
"min_Temperature_of_Coldest_Month", "temperature_Annual_Range",
"mean_Temperature_of_Wettest_Quarter",
"mean_Temperature_of_Driest_Quarter",
"mean_Temperature_of_Warmest_Quarter",
"mean_Temperature_of_Coldest_Quarter", "annual_Precipitation",
"precipitation_of_Wettest_Month", "precipitation_of_Driest_Month",
"precipitation_Seasonality", "precipitation_of_Wettest_Quarter",
"precipitation_of_Driest_Quarter", "precipitation_of_Warmest_Quarter",
"precipitation_of_Coldest_Quarter")
# extract bioClim data from distribution data
bioClim <- map_dfc(climRasters, function(layer)
raster::extract(layer, as_Spatial(sol)@coords,
cellnumbers = FALSE))
# add brahms number and species columns; rename bioClim columns
bioClim <- bioClim %>%
add_column(brahms = sol$brahms,
species = sol$species,
clade = sol$clade,
.before = 1) %>%
rename_at(vars(V1:V19), ~ varNames) %>%
na.omit()
bioClim
names(bioClim)
length(varNames)
climRasters
length(climRasters)
# worldclim data at 30s resolution; from http://worldclim.org/current
climRasters <- list.files("bio_37/", pattern = ".bil", full.names = TRUE)
climRasters <- map(climRasters, raster) # provides a list of single-layer rasters
# raster layer names; from http://worldclim.org/bioclim
varNames <- c("annual_Mean_Temperature", "mean_Diurnal_Range", "isothermality",
"temperature_Seasonality", "max_Temperature_of_Warmest_Month",
"min_Temperature_of_Coldest_Month", "temperature_Annual_Range",
"mean_Temperature_of_Wettest_Quarter",
"mean_Temperature_of_Driest_Quarter",
"mean_Temperature_of_Warmest_Quarter",
"mean_Temperature_of_Coldest_Quarter", "annual_Precipitation",
"precipitation_of_Wettest_Month", "precipitation_of_Driest_Month",
"precipitation_Seasonality", "precipitation_of_Wettest_Quarter",
"precipitation_of_Driest_Quarter", "precipitation_of_Warmest_Quarter",
"precipitation_of_Coldest_Quarter")
# extract bioClim data from distribution data
bioClim <- map_dfc(climRasters, function(layer)
raster::extract(layer, as_Spatial(sol)@coords,
cellnumbers = FALSE))
# add brahms number and species columns; rename bioClim columns
bioClim <- bioClim %>%
add_column(brahms = sol$brahms,
species = sol$species,
clade = sol$clade,
.before = 1) %>%
rename_at(vars(V1:V18), ~ varNames) %>%
na.omit()
# worldclim data at 30s resolution; from http://worldclim.org/current
climRasters <- list.files("bio_37/", pattern = ".bil", full.names = TRUE)
climRasters <- map(climRasters, raster) # provides a list of single-layer rasters
# raster layer names; from http://worldclim.org/bioclim
varNames <- c("annual_Mean_Temperature", "mean_Diurnal_Range", "isothermality",
"temperature_Seasonality", "max_Temperature_of_Warmest_Month",
"min_Temperature_of_Coldest_Month", "temperature_Annual_Range",
"mean_Temperature_of_Wettest_Quarter",
"mean_Temperature_of_Driest_Quarter",
"mean_Temperature_of_Warmest_Quarter",
"mean_Temperature_of_Coldest_Quarter", "annual_Precipitation",
"precipitation_of_Wettest_Month", "precipitation_of_Driest_Month",
"precipitation_Seasonality", "precipitation_of_Wettest_Quarter",
"precipitation_of_Driest_Quarter", "precipitation_of_Warmest_Quarter",
"precipitation_of_Coldest_Quarter")
# extract bioClim data from distribution data
bioClim <- map_dfc(climRasters, function(layer)
raster::extract(layer, as_Spatial(sol)@coords,
cellnumbers = FALSE))
# add brahms number and species columns; rename bioClim columns
bioClim <- bioClim %>%
add_column(brahms = sol$brahms,
species = sol$species,
clade = sol$clade,
.before = 1) %>%
rename_at(vars(V1:V19), ~ varNames) %>%
na.omit()
# anova; 17 of 19 significant; only isothermality and temperature_Seasonality not
summary(aov(as.matrix(cbind(bioClim[4:22])) ~ bioClim$clade))
# boxplots
(plotNames <- varNames %>%
str_replace_all("_", " ") %>%
str_to_title())
# alter bioclim variable names for plot
plotNames <- c("annual_Mean_Temperature" = "Annual\nMean Temperature",
"mean_Diurnal_Range" = "Mean Dirunal Range",
"isothermality" = "Isothermality",
"temperature_Seasonality" = "Temperature\nSeasonality",
"max_Temperature_of_Warmest_Month" = "Max Temperature\nof Warmest Month",
"min_Temperature_of_Coldest_Month" = "Min Temperature\nof Coldest Month",
"temperature_Annual_Range" = "Temperature\nAnnual Range",
"mean_Temperature_of_Wettest_Quarter" =
"Mean Temperature\nof Wettest Quarter",
"mean_Temperature_of_Driest_Quarter" =
"Mean Temperature\nof Driest Quarter",
"mean_Temperature_of_Warmest_Quarter" =
"Mean Temperature\nof Warmest Quarter",
"mean_Temperature_of_Coldest_Quarter" =
"Mean Temperature\nof Coldest Quarter",
"annual_Precipitation" = "Annual Precipitation",
"precipitation_of_Wettest_Month" = "Precipitation\nof Wettest Month",
"precipitation_of_Driest_Month" = "Precipitation\nof Driest Month",
"precipitation_Seasonality" = "Precipitation\nSeasonality",
"precipitation_of_Wettest_Quarter" = "Precipitation\nof Wettest Quarter",
"precipitation_of_Driest_Quarter" = "Precipitation\nof Driest Quarter",
"precipitation_of_Warmest_Quarter" = "Precipitation\nof Warmest Quarter",
"precipitation_of_Coldest_Quarter" = "Precipitation\nof Coldest Quarter")
(boxplots <- bioClim %>%
gather(measurement, value, -c(brahms, species, clade)) %>%
na.omit() %>%
ggplot(aes(x = clade, y = value, fill = clade)) +
geom_boxplot() +
scale_x_discrete(labels = c("Dry", "Widespread")) +
scale_fill_manual(values = c("#6D9EC1", "#E46726")) +
xlab("Clade") +
ylab("Value") +
facet_wrap(~measurement, scales = "free_y", nrow = 5, ncol = 4,
labeller = as_labeller(plotNames)) +
theme_light() +
theme(legend.position = "None",
text = element_text(size = 9),
strip.background = element_rect(fill = "#404040"),
strip.text = element_text(family = ("Helvetica")),
axis.text = element_text(colour = "#404040", family = "Helvetica")))
# view correlations between climate variables
library(ggcorrplot)
(bioClim %>%
dplyr::select(-brahms, -species, -clade) %>%
cor() %>%
ggcorrplot(ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726")))
climPCA$var$contrib
summary(climPCA)
